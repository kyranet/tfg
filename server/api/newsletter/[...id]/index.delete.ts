import { z } from 'zod';
import { deleteNewsletter } from '~/server/utils/database/services/daos/comunicacion/delete';

const schema = z.object({ id: CoercedIntegerId });

/**
 * Deletes a newsletter by its ID.
 *
 * TODO: This route is intentionally unchecked (no permissions required),
 * however, it should be protected by a conditional mechanism:
 *
 * - If the user is an admin, they should be able to delete any newsletter.
 * - If the user is authenticated, they should be able to delete their own
 *   newsletter.
 * - If the user is not authenticated, they should be able to delete their own
 *   newsletter by providing a valid token.
 *
 * For the last case, the token should be sent in the query parameters, like
 * this:
 *
 * ```http
 * DELETE /api/newsletter/1?token=123456
 * ```
 *
 * The token could be generated by the server, possibly by encrypting the email
 * using `bcrypt`, then using `bcrypt.compare` (see auth routes) to verify the
 * token.
 *
 * This token is required to prevent users from deleting other users'
 * newsletters while still allowing them to delete their own newsletters.
 *
 * Allowing users to opt-out of the newsletter is a common practice, and
 * required by law in some countries.
 */
export default eventHandler(async (event) => {
	const { id } = await getValidatedRouterParams(event, schema.parse);
	await deleteNewsletter(id);
	return null;
});
